{{ 'section-contact-form.min.css' | asset_url | stylesheet_tag: preload: true }}
<noscript>{{ 'section-contact-form.min.css' | asset_url | stylesheet_tag }}</noscript>
<style>
  {%- comment -%}2024-05-29 Paul N add scroll tops for sticky header for adding class to form on submission using javascript for invalid CSS styles {%- endcomment -%}
  {%- comment -%}25px is to add some height for the first inputs label height{%- endcomment -%}
  @media (max-width: 767px) {
    html {
      scroll-padding-top: calc(25px + var(--sticky-header-mobile-height) );
      /*scroll-margin-top: calc(25px + var(--sticky-header-mobile-height) );*/
    }
    :target {
      scroll-padding-top: calc(25px + var(--sticky-header-mobile-height) );
      /*scroll-margin-top: calc(25px + var(--sticky-header-mobile-height) );*/
      scroll-snap-margin-top:: calc(25px + var(--sticky-header-mobile-height) ); /* iOS 11 and older? */
    }
  }
  @media (min-width: 768px) {
    html {
      scroll-padding-top: calc(25px + var(--sticky-header-desktop-height) );
      /*scroll-margin-top: calc(25px + var(--sticky-header-desktop-height) );*/
    }
    :target {
      scroll-padding-top: calc(25px + var(--sticky-header-desktop-height) );
      /*scroll-margin-top: calc(25px + var(--sticky-header-desktop-height) );*/
      scroll-snap-margin-top:: calc(25px + var(--sticky-header-desktop-height) ); /* iOS 11 and older? */
    }
  }
 .overlay {
    position: fixed;
    background-color: #00000059;
    top: 0;
    left: 0;
    z-index: 2;
    width: 100vw;
    height: 100vh;
  }
  p.pop-up-title {
    font-size: 20px;
  }

  .custom-pop-up {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: calc(50vw / 2 + 250px);
    padding: 40px;
    padding-bottom: 47px;
    padding-top: 47px;
    background-color: white;
    border-radius: 0px;
    text-align: center;
}

  .custom-pop-up h1 {
    padding-bottom: 20px;
    position: relative;
  }
  .custom-pop-up h1:before {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    height: 1px;
    width: 100%;
    background-color: #80808038;
  }
  .note.form-success {
    opacity: 0;
  }

  button.pop-up-btn {
    margin-top: 15px;
    position: relative;
    text-align: center;
    padding: 16px 24px;
    background-color: transparent;
    color: #ffffff;
    border: none;
    font-size: 12px;
    letter-spacing: 1px;
    text-transform: uppercase;
    font-weight: 505;
}

  button.pop-up-btn:before {
    background-color: var(--primary-btn-bg-color);
    border-radius: 2px;
    content: "";
    width: 100%;
    height: 100%;
    position: absolute;
    top: 50%;
    left: 50%;
    z-index: -1;
    transform: translate(-50%, -50%) !important;
    transition-duration: .8s;
    transition-property: transform;
    transition-timing-function: cubic-bezier(.5,0,0,1) ;
  }
  
  .email-title, .message-title {
    display: inline-block;
    font-size: 15px;
  }
  .email-title ~ span {
    font-size: 14px;
  }

    
   button.pop-up-btn:hover:before {
    transform: translate(-50%, -50%) scale(.95, .9) !important;
   }

  .custom-pop-up .close-btn {
    position: absolute;
    top: 0;
    right: 0;
    transform: translate(-12px, 10px);
    cursor: pointer;
}
  

</style>
  
    
<section class="section-contact-form wrapper-spacing--v wrapper-spacing--h color-scheme--{{ section.settings.section_color_scheme }}" 
  data-wetheme-section-type="section--contact-form" 
  data-wetheme-section-id="{{ section.id }}"
  style="--padding-section-top: {{ section.settings.section_padding_top }}px; --padding-section-bottom: {{ section.settings.section_padding_bottom }}px;"
  >

  {% comment %} Section title and description {% endcomment %}
  {% render 'dynamic-section-header' with section_title: section.settings.title, section_description: section.settings.description %}

    <div class="show-on-scroll">

      <div{% if section.settings.form_width == 'narrow' %} class="width--narrow"{% endif %}>

      {% unless section.blocks.size == 0 %}
        <div>
          {%- comment -%}2024-05-30 Paul N. NOTE: the parameter `,novalidate: 'novalidate'` will cause issues with validation styles and javascript {%- endcomment -%}
          {% form 'contact', id: 'ContactForm', class: 'section-contact-form--form' %}

            {% if form.errors %}
              <div class="w-full">
                {{ form.errors | default_errors }}
              </div>
            {% endif %}
            {% if form.posted_successfully? %}
              <div class="w-full">
                <p class="note form-success">
                  {{ 'contact.form.post_success' | t }} 
                </p>
              </div>
            {% endif %}

            {% for block in section.blocks %}
              {% liquid
                assign input_wrapper = 'input-wrapper '
                case block.settings.input_width
                  when 'partial'
                    assign input_width = 'w-partial' | prepend: input_wrapper
                  when 'full'
                    assign input_width = 'w-full' | prepend: input_wrapper
                endcase

                assign nameInputString = 'contact.form.name' | t
                assign formName = 'contact[' | append: nameInputString | append: ']'
                assign emailInputString = 'contact.form.email' | t
                assign emailInputName = 'email'
                assign formEmailName = 'contact[' | append: emailInputName | downcase | append: ']'
                assign telInputString = 'contact.form.phone' | t
                assign formTelName = 'contact[' | append: telInputString | append: ']'
                assign msgInputString = 'contact.form.message' | t
                assign formMsgName = 'contact[' | append: msgInputString | append: ']'

                if block.type == 'custom_input'
                  assign formId = 'form_' | append: block.settings.placeholder | downcase | handleize
                  assign inputName = 'contact[' | append: block.settings.placeholder | append: ']'
                  assign input_attr = 'aria-labelledby="' | append: formId | append: '" data-aid="' | append: formId | append: '"'
                endif

                case block.type
                  when 'name_input'
                    assign placeholder = nameInputString
                  when 'email_input'
                    assign placeholder = emailInputString
                  when 'tel_input'
                    assign placeholder = telInputString
                  when 'message_input'
                    assign placeholder = msgInputString
                  when 'custom_input'
                    assign placeholder = block.settings.placeholder
                endcase

                assign labelPlaceholder = placeholder
                if block.settings.required
                  assign labelPlaceholder = placeholder | append: ' '
                endif

                if form.name
                  assign nameInputVal = form.name
                elsif customer
                  assign nameInputVal = customer.name
                endif

                if form.email
                  assign emailInputVal = form.email
                elsif customer
                  assign emailInputVal = customer.email
                endif

                if form.phone
                  assign phoneInputVal = form.phone
                elsif customer
                  assign phoneInputVal = customer.phone
                endif
              %}
              
              {% case block.type %}

                {% when 'name_input' %}
                  <div class="{{ input_width }}">
                    {% liquid
                      assign formId = 'form_' | append: nameInputString | downcase | handleize
                      assign input_attr = 'aria-labelledby="' | append: formId | append: '" data-aid="name-input"'
                    %}
                    {% render 'form-input' with type: 'text', has_label: false, animate_label: false, label_text: nameInputString, id: formId, placeholder: labelPlaceholder, value: nameInputVal, name: formName, required: block.settings.required, attributes: input_attr %}
                  </div>

                {% when 'email_input' %}
                  <div class="{{ input_width }}">
                    {% liquid
                      assign formId = 'form_' | append: emailInputString | downcase | handleize
                      assign input_attr = 'aria-labelledby="' | append: formId | append: '" data-aid="email-input"'
                    %}
                    {% render 'form-input' with type: 'email', has_label: false, animate_label: false, label_text: emailInputString, id: formId, placeholder: labelPlaceholder, value: emailInputVal, name: formEmailName, required: block.settings.required, attributes: input_attr %}
                  </div>

                {% when 'tel_input' %}
                  <div class="{{ input_width }}">
                    {% liquid
                      assign formId = 'form_' | append: telInputString | downcase | handleize
                      assign input_attr = 'aria-labelledby="' | append: formId | append: '" data-aid="tel-input"'
                    %}
                    {% render 'form-input' with type: 'tel', has_label: false, animate_label: false, label_text: telInputString, id: formId, placeholder: labelPlaceholder, value: phoneInputVal, name: formTelName, required: block.settings.required, attributes: input_attr %}
                  </div>

                {% when 'message_input' %}
                  <div class="{{ input_width }}">
                    {% liquid
                      assign formId = 'form_' | append: msgInputString | downcase | handleize
                      assign input_attr = 'aria-labelledby="' | append: formId | append: '" data-aid="message-input"'
                    %}
                    {% render 'form-input--textarea' with id: formId, placeholder: labelPlaceholder, name: formMsgName, has_label: false, animate_label: false, label_text: msgInputString, attributes: input_attr, required: block.settings.required, content: form.body %}
                  </div>

                {% when 'custom_input' %}
                  <div class="{{ input_width }}">
                    {% render 'form-input' with type: 'text', has_label: false, animate_label: false, label_text: inputString, id: formId, placeholder: labelPlaceholder, value: form.body, name: inputName, required: block.settings.required, attributes: input_attr %}
                  </div>

              {% endcase %}

            {% endfor %}
            
            {% if section.blocks.size > 0 %}
              <div class="section-contact-form--submit-wrapper w-full text-link-animated">
                {{ 'shopify.online_store.spam_detection.disclaimer_html' | t }}
                <button type="submit" class="btn">{{ 'contact.form.send' | t }}</button>
              </div>
            {% endif %}
          
          {% endform %}
        </div>
      {% else %}
        <div class="placeholder-noblocks">
          {{ 'general.onboarding.no_content' | t }}
        </div>
      {% endunless %}

      </div>

    </div>
 
      <div class="overlay" style="display: none">
         <div class="custom-pop-up">
               <div class="close-btn">
                 <svg width="16px" height="16px" viewBox="-0.5 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M3 21.32L21 3.32001" stroke="#000000" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> <path d="M3 3.32001L21 21.32" stroke="#000000" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>
               </div>
               <h1>Contact Us</h1>
              <p class="pop-up-title">{{ 'contact.form.post_success' | t }}</p>
              <h4 class="email-title">We'll email you at:</h4> <span></span><br>
              <h4 class="message-title">Message:</h4><br> <span></span><br>
             <button class="pop-up-btn"> Done </button>
          </div>
      </div>

  
    {%- comment -%}2024-05-29 Paul N add class submit-attempted to form on submission using javascript for invalid CSS styles {%- endcomment -%}
    {%- comment -%}handle novalidate submit event , since contact form uses a <button> instead of a proper <input type="submit"> for HTML validation{%- endcomment -%}
    {%- comment -%}see custom.css for contact form styles including .js-input-validation-error{%- endcomment -%}
    <script>
      const contactForm = document.getElementById('ContactForm');
      {%- comment -%}disable browser native validation tooltips{%- endcomment -%}
      contactForm.querySelectorAll( 'input[required] , textarea[required]').forEach( input => { input.setCustomValidity(" ") } );

      const requiredInputs = contactForm.querySelectorAll('input[required] , textarea[required]');
        requiredInputs.forEach(input => {
          input.addEventListener("input", function() {
            input.validity.valueMissing ? input.setCustomValidity(' ') : input.setCustomValidity('');
            input.parentElement.classList.toggle('js-input-validation-error',!input.validity.valid);
            //input.validity.valid ? input.parentElement.classList.remove('js-input-validation-error') : input.parentElement.classList.remove('js-input-validation-error');
            if( contactForm.classList.contains('submit-attempted') ){
              contactForm.classList.remove('submit-attempted');
            }
          });

          input.addEventListener('invalid', event => {
            if (!input.validity.valid && input.parentElement.classList.contains('input-wrapper')) {
              input.parentElement.classList.add('js-input-validation-error');
            }
            //input.parentElement.classList.add('js-input-validation-error');
          }, false );
          //input.addEventListener("beforeinput", function() { input.checkValidity();});
      });

      {%- comment -%}`invalid` event will happen in place of a submit event{%- endcomment -%}
      // contactForm.addEventListener("invalid", (event) => {this.classList.add('invalid')});
      document.querySelector('#ContactForm .btn').addEventListener("click", function(){
        contactForm.classList.add('submit-attempted');
      });
      contactForm.addEventListener('submit', function(event) {
        debugger
        this.classList.add('submit-attempted');
      });
    </script>

    <script>
      let first_name = localStorage.getItem("first_name");
      let last_name = localStorage.getItem("last_name");
      let email = localStorage.getItem("email");
      let message = localStorage.getItem("message");
      let pop_up_title = document.querySelector('.pop-up-title');
      let overlay = document.querySelector('.overlay:has(.custom-pop-up)');
      let form_success = document.querySelector('.note.form-success');
      if((first_name || last_name) && email && message && pop_up_title && form_success) {
        overlay.style.display = "block";
        let text_form_success = pop_up_title.innerHTML.trim();
        pop_up_title.innerHTML = text_form_success.replace("Thank you.", `Thank you, ${first_name} ${last_name}.<br/>`);
        document.querySelector('.email-title + span').innerHTML = email;
        document.querySelector('.message-title ~ span').innerHTML = message;
        form_success.parentNode.style.display = "none";
        let close_pop_up = document.querySelectorAll('.pop-up-btn, .custom-pop-up .close-btn');
        close_pop_up.forEach((item) => {
          item.addEventListener("click", () => {
            overlay.style.display = "none";
            localStorage.setItem("first_name", '');
            localStorage.setItem("last_name", '');
            localStorage.setItem("email", '');
            localStorage.setItem("message", '');
          })
        })
      }
      let btn_submit = document.querySelector('.btn[type="submit"]');
      let form_first_name =  document.querySelector('#form_first-name');
      let form_last_name =  document.querySelector('#form_last-name');
      let form_email = document.querySelector('#form_email-address');
      let form_message = document.querySelector('#form_message');
      btn_submit.addEventListener("click", () => {
         first_name = localStorage.setItem("first_name", form_first_name.value);
         last_name = localStorage.setItem("last_name", form_last_name.value);
         email = localStorage.setItem("email", form_email.value);
         message = localStorage.setItem("message", form_message.value);
      })
    </script>
</section>

{% schema %}
{
  "name": "t:sections.section--contact-form.name",
  "class": "shopify-section contact-form",
  "settings": [
    {
      "type": "paragraph",
      "content": "t:sections.section--contact-form.settings.paragraph-0.content"
    },
    {
      "type": "select",
      "id": "form_width",
      "label": "t:all.Width",
      "options": [
        {
          "value": "full-width",
          "label": "t:all.Full_width"
        },
        {
          "value": "narrow",
          "label": "t:all.Narrow"
        }
      ],
      "default": "narrow"
    },
    {
      "type": "inline_richtext",
      "id": "title",
      "label": "t:all.Heading",
      "default": "Contact us"
    },
    {
      "type": "richtext",
      "id": "description",
      "label": "t:all.Description",
      "default": "<p>Have a question, or want a product recommendation? Get in touch.</p>"
    },
    {
      "type": "header",
      "content": "t:all.Layout"
    },
    {
      "type": "range",
      "id": "section_padding_top",
      "label": "t:all.Spacing_top",
      "min": 0,
      "max": 150,
      "step": 5,
      "unit": "t:all.px",
      "default": 60
    },
    {
      "type": "range",
      "id": "section_padding_bottom",
      "label": "t:all.Spacing_bottom",
      "min": 0,
      "max": 150,
      "step": 5,
      "unit": "t:all.px",
      "default": 60
    },
    {
      "type": "header",
      "content": "t:all.Color"
    },
    {
      "type": "select",
      "id": "section_color_scheme",
      "label": "t:all.Color_scheme",
      "default": "white",
      "options": [
        {
          "value": "white",
          "label": "t:all.Minimal"
        },
        {
          "value": "light",
          "label": "t:all.Light"
        },
        {
          "value": "accent",
          "label": "t:all.Feature"
        },
        {
          "value": "dark",
          "label": "t:all.Dark"
        }
      ]
    }
  ],
  "blocks": [
    {
      "name": "t:sections.section--contact-form.blocks.name_input.name",
      "type": "name_input",
      "limit": 1,
      "settings": [
        {
          "type": "checkbox",
          "id": "required",
          "label": "t:all.Required",
          "default": true
        },
        {
          "type": "select",
          "id": "input_width",
          "label": "t:all.Input_width",
          "options": [
            {
              "value": "partial",
              "label": "t:all.Partial"
            },
            {
              "value": "full",
              "label": "t:all.Full"
            }
          ],
          "default": "full"
        }
      ]
    },
    {
      "name": "t:sections.section--contact-form.blocks.email_input.name",
      "type": "email_input",
      "limit": 1,
      "settings": [
        {
          "type": "checkbox",
          "id": "required",
          "label": "t:all.Required",
          "default": true
        },
        {
          "type": "select",
          "id": "input_width",
          "label": "t:all.Input_width",
          "options": [
            {
              "value": "partial",
              "label": "t:all.Partial"
            },
            {
              "value": "full",
              "label": "t:all.Full"
            }
          ],
          "default": "full"
        }
      ]
    },
    {
      "name": "t:sections.section--contact-form.blocks.tel_input.name",
      "type": "tel_input",
      "limit": 1,
      "settings": [
        {
          "type": "checkbox",
          "id": "required",
          "label": "t:all.Required",
          "default": true
        },
        {
          "type": "select",
          "id": "input_width",
          "label": "t:all.Input_width",
          "options": [
            {
              "value": "partial",
              "label": "t:all.Partial"
            },
            {
              "value": "full",
              "label": "t:all.Full"
            }
          ],
          "default": "full"
        }
      ]
    },
    {
      "name": "t:sections.section--contact-form.blocks.message_input.name",
      "type": "message_input",
      "limit": 1,
      "settings": [
        {
          "type": "checkbox",
          "id": "required",
          "label": "t:all.Required",
          "default": true
        },
        {
          "type": "select",
          "id": "input_width",
          "label": "t:all.Input_width",
          "options": [
            {
              "value": "partial",
              "label": "t:all.Partial"
            },
            {
              "value": "full",
              "label": "t:all.Full"
            }
          ],
          "default": "full"
        }
      ]
    },
    {
      "name": "t:sections.section--contact-form.blocks.custom_input.name",
      "type": "custom_input",
      "limit": 8,
      "settings": [
        {
          "type": "text",
          "id": "placeholder",
          "label": "t:sections.section--contact-form.blocks.custom_input.settings.placeholder.label",
          "default": "Order number"
        },
        {
          "type": "checkbox",
          "id": "required",
          "label": "t:all.Required",
          "default": false
        },
        {
          "type": "select",
          "id": "input_width",
          "label": "t:all.Input_width",
          "options": [
            {
              "value": "partial",
              "label": "t:all.Partial"
            },
            {
              "value": "full",
              "label": "t:all.Full"
            }
          ],
          "default": "full"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "t:sections.section--contact-form.presets.name",
      "settings": {
      },
      "blocks": [
        {
          "type": "name_input",
          "settings": {
            "required": true,
            "input_width": "partial"
          }
        },
        {
          "type": "email_input",
          "settings": {
            "required": true,
            "input_width": "partial"
          }
        },
        {
          "type": "tel_input",
          "settings": {
            "required": true,
            "input_width": "full"
          }
        },
        {
          "type": "message_input",
          "settings": {
            "required": true,
            "input_width": "full"
          }
        }
      ]
    }
  ],
  "disabled_on": {
    "groups": [
      "header"
    ]
  }
}
{% endschema %}