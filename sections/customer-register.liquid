<!-- /sections/customer-register.liquid -->
<style>
  .field {
    position: relative;
    padding-top: 4px;
  }
  
  .field .hidden-label {
    overflow: initial !important;
    clip: unset !important;
    width: auto;
  }
  
  .field:has(input:placeholder-shown) > label
  {
    top: 0;
    left: 0;
    transform: translate(10px, 13px);
    margin-bottom: 0;
    transition: all 0.4s cubic-bezier(.5,0,0,1);
    color: gray !important;
  }
  
 .field input::placeholder {
   color: transparent !important; 
 }
  
 .field:has(input:focus) > label,
 .field:has(input:not(:placeholder-shown)) > label
 {
   top: 0;
   left: 0;
   transform: translate(4px, 3px);
    scale: 0.795555;
   color: black !important;
 }
.field:has(input[type="email"]:focus) > label,
.field:has(input[type="email"]:not(:placeholder-shown)) > label {
   top: 0;
  left: 0;
  transform: translate(2px, 3px) scale(.6428571429) !important;
}
<style>
  @media only screen and (min-width: 768px) {
  form#create_customer {
    width: 360px !important;
  }
    .form-vertical {
      display: flex;
      justify-content: center;
    }
  }
  .grid__item--customer-accounts .errors {
    background-color: unset !important;
    border: none !important;
    padding: unset !important;
  }
  .custom-register-error-message {
    color: rgb(236, 113, 107);
    font-size: 12px;
    font-weight: 400;
    line-height: 16px;
    text-align: left;
    width: 100%;
    display: block;
    margin-top: -1rem;
    margin-bottom: 1rem;
  }
</style>
<div class="wrapper-spacing--v--template wrapper-spacing--h">
  <div class="grid page-main--wrapper">

    <div class="grid__item grid__item--customer-accounts large--one-third push--large--one-third text-center">

      <div class="template-title--wrapper">
        <h1 class="page--title template-title">{{ 'customer.register.title' | t }}</h1>
      </div>

      <div id="#CustomerRegisterForm" class="form-vertical">
        {% form 'create_customer' %}
          {{ form.errors | default_errors }}
          <div class="field">
            <label for="FirstName" class="hidden-label">{{ 'customer.register.first_name' | t }}</label>
            <input type="text" name="customer[first_name]" id="FirstName" class="input-full" placeholder="{{ 'customer.register.first_name' | t }}" {% if form.first_name %}value="{{ form.first_name }}"{% endif %} autocapitalize="words" autofocus>
          </div>

          <div class="field">
            <label for="LastName" class="hidden-label">{{ 'customer.register.last_name' | t }}</label>
            <input type="text" name="customer[last_name]" id="LastName" class="input-full" placeholder="{{ 'customer.register.last_name' | t }}" {% if form.last_name %}value="{{ form.last_name }}"{% endif %} autocapitalize="words">
          </div>
          
          <div class="field">
            <label for="Email" class="hidden-label">{{ 'customer.register.email' | t }}</label>
            <input type="email" name="customer[email]" id="Email" class="input-full{% if form.errors contains 'email' %} error{% endif %}" placeholder="{{ 'customer.register.email' | t }}" {% if form.email %} value="{{ form.email }}"{% endif %} autocorrect="off" autocapitalize="off">
          </div>

          <div class="field">
            <label for="CreatePassword" class="hidden-label">{{ 'customer.register.password' | t }}</label>
            <input type="password" name="customer[password]" id="CreatePassword" class="input-full{% if form.errors contains 'password' %} error{% endif %}" placeholder="{{ 'customer.register.password' | t }}">
          </div>
          <p>
            <button id="create" type="submit" class="btn btn--full account-section--btn">{{ 'customer.register.submit' | t }}</button>
          </p>
          <span class="register-cancel--wrapper nav-link-animated--custom"><a class="animated-link--item" href="{{ shop.url }}">{{ 'customer.register.cancel' | t }}</a></span>

        {% endform %}
      </div>

    </div>

  </div>
</div>

<script>
  const emailRegex_customer_create = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

  document.addEventListener("DOMContentLoaded", (event) => {
    let emailField_customer_create = document.querySelector('#Email');
    let passwordField_customer_create = document.querySelector('#CreatePassword');
    let registerForm_customer_create = document.querySelector("form#create_customer");
    let submitButton_customer_create = document.querySelector("button[type='submit']");

    if (!emailField_customer_create || !passwordField_customer_create || !registerForm_customer_create || !submitButton_customer_create) {
      console.error("One or more form elements not found.");
      return;
    }

    function displayError_customer_create(message, element) {
      let existingError = element.nextElementSibling;
      if (existingError && existingError.classList.contains('custom-register-error-message')) {
        existingError.remove();
      }
      if (message) {
        element.insertAdjacentHTML("afterend", `<span class="custom-register-error-message">${message}</span>`);
        return false;
      }
      return true;
    }

    function checkEmailValidity_customer_create() {
      let emailValue = emailField_customer_create.value;
      let errorMessage = emailValue ? (emailRegex_customer_create.test(emailValue) ? '' : 'Please enter a valid email address.') : 'Email is required.';
      return displayError_customer_create(errorMessage, emailField_customer_create);
    }

    function checkPasswordValidity_customer_create() {
      let passwordValue = passwordField_customer_create.value;
      let errorMessage = passwordValue ? '' : 'Password is required.';
      return displayError_customer_create(errorMessage, passwordField_customer_create);
    }

    emailField_customer_create.addEventListener("input", checkEmailValidity_customer_create);
    passwordField_customer_create.addEventListener("input", checkPasswordValidity_customer_create);

    registerForm_customer_create.addEventListener("submit", (e) => {
      let isEmailValid = checkEmailValidity_customer_create();
      let isPasswordValid = checkPasswordValidity_customer_create();
      if (!isEmailValid || !isPasswordValid) {
        e.preventDefault();
      }
    });

    submitButton_customer_create.addEventListener("click", (e) => {
      let isEmailValid = checkEmailValidity_customer_create();
      let isPasswordValid = checkPasswordValidity_customer_create();
      if (!isEmailValid || !isPasswordValid) {
        e.preventDefault();
      }
    });
  });
</script>


{% schema %}
{
  "name": "t:sections.customer-register.name",
  "settings": [

  ]
}
{% endschema %}